function  fg = FG2D(k,Kd,varargin)
% Modified for 12D reconframe data
% Based on Miki Lustig his nufft operator
% Changed the input for the nufft_init. Use no overgridding anymore and a
% different interpolation kernel. minmax:tuned instead of minmax:kb. This
% one allowed not overgridding. It is approximately a factor 2 faster.


% Check input
if numel(Id)<12 || numel(Kd)<12
    Id(end+1:12)=1;
    Kd(end+1:12)=1;
end

fg.parfor=0;

% Image space dimensions
fg.Id=Id;

% K-space dimensions
fg.Kd=Kd;

% Mix the readouts and samples in advance
fg.k=reshape(k,[3 Kd(1)*Kd(2) 1 1 1 Kd(5:12)]);end;clear k 

% Input for nufft_init
Jd=[4,4];     % Kernel width of convolution
Nd=Id(1:2);
Gd=[Nd*1];    % Overgridding ratio
n_shift=Nd/2;

% Create a seperate struct for all the dimensions that need seperate trajectories
for avg=1:Kd(12) % Averages
for ex2=1:Kd(11) % Extra2
for ex1=1:Kd(10) % Extra1
for mix=1:Kd(9)  % Locations
for loc=1:Kd(8)  % Mixes
for ech=1:Kd(7)  % Phases
for ph=1:Kd(6)   % Echos
for dyn=1:Kd(5)  % Dynamics
    om=[fg.k(2,:,:,:,:,dyn,ph,ech,loc,mix,ex1,ex2,avg); fg.k{n}(1,:,:,:,:,dyn,ph,ech,loc,mix,ex1,ex2,avg)]'*2*pi;
    fg.st{dyn,ph,ech,loc,mix,ex1,ex2,avg} = nufft_init(om, Nd, Jd, Gd, n_shift,'minmax:tuned');
end % Dynamics
end % Echos
end % Phases
end % Mixes
end % Locations
end % Extra1
end % Extra2
end % Averages

fg.phase=1;
fg.w=1;
fg.adjoint=0;
fg.mode=2;   % 2= complex image
fg=class(fg,'FG2D');

% end
end

